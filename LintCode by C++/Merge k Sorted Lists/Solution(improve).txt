/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    ListNode* mergeTwoLists(ListNode* L1, ListNode* L2)
    {
        ListNode *dummy = new ListNode(0);
        ListNode *cur = dummy;
        while(L1 != nullptr && L2 != nullptr)
        {
            if(L1->val < L2->val)
            {
                cur->next = L1;
                L1 = L1->next;
            }
            else
            {
                cur->next = L2;
                L2 = L2->next;
            }
            cur = cur->next;
        }
        cur->next = L1 ? L1 : L2;
        return dummy->next;
    }
  
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        if(lists.size() == 0) return nullptr;
        int start = 0, end = lists.size() -1;
        while(end > 0){
            start = 0;
            while(start < end)
            {
                lists[start] = mergeTwoLists(lists[start], lists[end]);
                start++;
                end--;
            }
        }
        return lists[0];
    }
};


