/**
 * Definition of ParentTreeNode:
 * class ParentTreeNode {
 * public:
 *     int val;
 *     ParentTreeNode *parent, *left, *right;
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the tree
     * @param A, B: Two node in the tree
     * @return: The lowest common ancestor of A and B
     */
    ParentTreeNode *lowestCommonAncestorII(ParentTreeNode *root,
                                           ParentTreeNode *A,
                                           ParentTreeNode *B) {
        // Write your code here
        if(root == nullptr || root == A || root == B) return root;
        ParentTreeNode *left = lowestCommonAncestorII(root->left, A, B);
        ParentTreeNode *right = lowestCommonAncestorII(root->right, A, B);
        if(left != nullptr && right != nullptr) return root;
        return left == nullptr? right : left;
    }
};