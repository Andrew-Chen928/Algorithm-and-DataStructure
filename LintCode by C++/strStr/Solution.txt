//first solution 
class Solution {
public:
    /**
     * Returns a index to the first occurrence of target in source,
     * or -1  if target is not part of source.
     * @param source string to be scanned.
     * @param target string containing the sequence of characters to match.
     */
    int strStr(const char *source, const char *target) {
        if(source == nullptr || target == nullptr) return -1;
        int n1 = strlen(source), n2 = strlen(target);
        int i, j;
        for(i = 0; i <= n1 - n2 + 1; i++)
        {
            for(j = 0; j < n2; j++)
            {
                if(source[i+j] != target[j]) break;
            }
            if(j == n2) return i;
        }
        return -1;
    }
};


//second solution (use memcpy to get substr)
class Solution {
public:
    /**
     * Returns a index to the first occurrence of target in source,
     * or -1  if target is not part of source.
     * @param source string to be scanned.
     * @param target string containing the sequence of characters to match.
     */
    int strStr(const char *source, const char *target) {
        if(source == NULL || target == NULL) return -1;
        int len_A = strlen(source);
        int len_B = strlen(target);
        for(int i = 0; i <= len_A - len_B; i++)
        {
            char tmp[len_B];
            memcpy( tmp, &source[i], len_B );
            tmp[len_B] = '\0';
            if(strcmp(tmp , target) == 0) return i;
        }
        return -1;
    }
};
