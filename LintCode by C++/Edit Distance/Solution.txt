class Solution {
public:    
    /**
     * @param word1 & word2: Two string.
     * @return: The minimum number of steps.
     */
    int minDistance(string word1, string word2) {
        // write your code here
        int m = word1.length() + 1;
        int n = word2.length() + 1;
        vector<vector<int>> table(m, vector<int> (n));
    
        //initialize the table
        for(int i = 0; i < m; i++)
        {
            table[i][0] = i;
        }
        for(int i = 0; i < n; i++)
        {
            table[0][i] = i;
        }
        
        //DP
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                //important: compare word1[i-1] == word2[j-1] since we have an 
                //extra line in the table
                if(word1[i-1] == word2[j-1]) 
                {
                    table[i][j] = table[i-1][j-1];
                }
                else{
                    //steps by insertion
                    int x = table[i][j-1] + 1;
                    //steps by deletion
                    int y = table[i-1][j] + 1;
                    //steps by replacement
                    int z = table[i-1][j-1] + 1;
                    table[i][j] = min(min(x,y) , z);
                   
                }
            }
        }
        return table[m-1][n-1];
    }
};
