/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 * Example of iterate a tree:
 * BSTIterator iterator = BSTIterator(root);
 * while (iterator.hasNext()) {
 *    TreeNode * node = iterator.next();
 *    do something for node
 */
class BSTIterator {
public:
    //@param root: The root of binary tree.
    
    vector<TreeNode*> v;
    int pos = -1;
    BSTIterator(TreeNode *root) {
        // write your code here
        init(root, v);
    }

    void init(TreeNode *root, vector<TreeNode*> &v)
    {
        if(root != nullptr)
        {
            init(root->left, v);
            v.emplace_back(root);
            init(root->right, v);
        }
    }
    
    //@return: True if there has next node, or false
    bool hasNext() {
        // write your code here
        int k = v.size();
        if(pos < k-1) return true;
        else return false;
    }
    
    //@return: return next node
    TreeNode* next() {
        // write your code here
        return v[++pos];
    }
};