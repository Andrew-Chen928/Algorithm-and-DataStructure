/**
 * Definition of singly-linked-list:
 * 
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *        this->val = val;
 *        this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The head of linked list.
     * @param m: The start position need to reverse.
     * @param n: The end position need to reverse.
     * @return: The new head of partial reversed linked list.
     */
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        // write your code here
    
        if( m == n ) return head;
        ListNode *dummy = new ListNode(0);
        dummy->next = head;
        ListNode *left = dummy;
        for(int i = 1; i < m; i++)
        {
            left = left->next;
        }
        ListNode *pre = left->next;
        ListNode *cur = pre->next;
        
        for(int i = 0; i < n - m; i++)
        {
            ListNode *tmp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = tmp;
        }
        
        left->next->next = cur;
        left->next = pre;
        return dummy->next;
    }
};
