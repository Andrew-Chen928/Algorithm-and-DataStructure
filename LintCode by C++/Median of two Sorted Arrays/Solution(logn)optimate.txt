class Solution {
public:
    /**
     * @param A: An integer array.
     * @param B: An integer array.
     * @return: a double whose format is *.5 or *.0
     */
    int findKth(vector<int> A, vector<int> B, int A_start, int B_start, int k)
    {
        if(A.size() <= A_start) return B[B_start + k - 1];
        else if(B.size() <= B_start) return A[A_start + k - 1];
        if(k == 1) return min(A[A_start], B[B_start]);
        
        int first = A_start + k / 2 - 1 >= A.size() ? INT_MAX : A[A_start + k / 2 - 1]; 
        int second = B_start + k / 2 - 1 >= B.size() ? INT_MAX : B[B_start + k / 2 - 1];
        if(first < second){
            return findKth(A, B, A_start + k / 2, B_start, k - k / 2 );
        }
        else{
            return findKth(A, B, A_start, B_start + k / 2, k - k / 2 );
        }
    }
    
    double findMedianSortedArrays(vector<int> A, vector<int> B) {
        // write your code here
        int m = A.size(), n = B.size();
        if((A.size() + B.size()) % 2 != 0) return findKth(A, B, 0, 0, (m + n) / 2 + 1 );
        else return (findKth(A, B, 0, 0, (m + n) / 2) + 
                    findKth(A, B, 0, 0, (m + n) / 2 + 1 ))  / 2.0;
    }
};
