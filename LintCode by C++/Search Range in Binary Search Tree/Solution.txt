class Solution {
    /** 
     * param A : an integer sorted array
     * param target :  an integer to be inserted
     * return : an integer
     */
public:
    int searchInsert(vector<int> &A, int target) {
        // write your code here
        if(A.size() < 1) return 0;
        int left = 0; 
        int right = A.size() - 1;
        while( left  <= right)
        {
            int mid = left + (right - left) / 2;
            if(A[mid] >= target) /**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1<=key<=k2 in ascending order.
     */
    void findRange(TreeNode *root, int k1, int k2, vector<int> &res){
        if(root == nullptr) return;
        if(root->val >= k1 && root->val <= k2) res.emplace_back(root->val);
        findRange(root->left, k1, k2, res);
        findRange(root->right, k1, k2, res);
    }
     
    vector<int> searchRange(TreeNode* root, int k1, int k2) {
        // write your code here
        vector<int> res;
        findRange(root, k1, k2, res);
        sort(res.begin(), res.end());
        return res;
    }
};
            {   
                right = mid - 1;
            }
            else 
            {
                left = mid + 1;
            }
        }
        return left;
    }
};