/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
TreeNode* convertTree(vector<int> v, int s, int e){
    if(s == e) 
    {
        TreeNode *root = new TreeNode(v[s]);
        return root;
    }
    else if(s > e) return nullptr;
    else{
        int mid = s + (e - s) / 2;
        TreeNode *root = new TreeNode(v[mid]);
        root->left = convertTree(v, s, mid - 1);
        root->right = convertTree(v, mid + 1, e);
        return root;
    }
};

class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    TreeNode *sortedListToBST(ListNode *head) {
        // write your code here
        vector<int> tmp;
        while(head != nullptr)
        {
            tmp.emplace_back(head->val);
            head = head->next;
        }
        if(tmp.size() == 0) return nullptr;
        int start = 0, end = tmp.size() -1;
        return convertTree(tmp, start, end);
    }
};


