class Solution {
public:    
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    int numDistinct(string &S, string &T) {
        // write your code here
        //memory saving space complexity = O(n)
        int m = S.length() + 1;
        int n = T.length() + 1;
        vector<int> table(m, 1);
        
        for(int i = 1; i < n; i++)
        {
            int preMatch = table[0];
            table[0] = 0;
            for(int j = 1; j < m; j++)
            {
                int tmp = table[j];
                table[j] = table[j-1];
                if(S[j-1] == T[i-1]) table[j] += preMatch;
                preMatch = tmp;
            }
        }
        return table[m-1];
    }
};
