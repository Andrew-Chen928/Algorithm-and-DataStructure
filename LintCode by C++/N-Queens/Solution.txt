class Solution {
public:
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
     
     
    void findQueen(vector<vector<string>> &res, vector<int> &validCol, int n)
    {
        if(validCol.size() == n)
        {
            res.emplace_back(drawTable(validCol, n));
            return;
        }
        
        for(int i = 0; i < n; i++)
        {
            if(!isValid(validCol, i)) continue;
            validCol.emplace_back(i);
            findQueen(res, validCol, n);
            validCol.pop_back();
        }
    }
    
    bool isValid(vector<int> validCol, int col)
    {
        int row = validCol.size();
        for(int i = 0; i < row; i++)
        {
            if(validCol[i] == col) return false;
            if(abs(i - row) == abs(validCol[i] - col)) return false;
        }
        return true;
    }
    
    vector<string> drawTable(vector<int> validCol, int n)
    {
        vector<string> tmp;
        for(int i = 0; i < validCol.size(); i++)
        {
            string s(n, '.');
            s[validCol[i]] = 'Q';
            tmp.emplace_back(s);
        }
        return tmp;
    }
    
    vector<vector<string> > solveNQueens(int n) {
        // write your code here
        vector<vector<string>> res;
        vector<int> validCol;
        findQueen(res, validCol, n);
        return res;
    }
};
