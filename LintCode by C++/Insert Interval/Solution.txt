/**
 * Definition of Interval:
 * class Interval {
 * public:
 *     int start, end;
 *     Interval(int start, int end) {
 *         this->start = start;
 *         this->end = end;
 *     }
 * }
 */
 
class Solution {
public:
    /**
     * Insert newInterval into intervals.
     * @param intervals: Sorted interval list.
     * @param newInterval: new interval.
     * @return: A new interval list.
     */
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // write your code here
        vector<Interval> result;
        int i = 0;
        int len = intervals.size();
        //insert all the intervals in front of the newInterval without overlap
        while(i < len && intervals[i].end < newInterval.start)
        {
            result.emplace_back(intervals[i]);
            i++;
        }
        
        //merge the overlap interval if exist
        while(i < len && intervals[i].start <= newInterval.end)
        {
            newInterval = {
                min(intervals[i].start, newInterval.start),
                max(intervals[i].end, newInterval.end)
            };
            i++;
        }
        result.emplace_back(newInterval);
        
        //put the remain intervals into result
        result.insert(result.end(), intervals.begin()+i, intervals.end());
        return result;
    }
};