/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    /**
     * @param root the root of binary tree
     * @return the length of the longest consecutive sequence path
     */
    private int longest; 
    
    public int longestConsecutive(TreeNode root) {
        // Write your code here
        longest = 0;
        helper(root);
        return longest;
    }
    
    private int helper(TreeNode root) {
        if(root == null) return 0;
        int left = helper(root.left);
        int right = helper(root.right);
        int subTreeLongest = 1;  
        if(root.left != null && root.val == root.left.val - 1) {
            subTreeLongest = Math.max(subTreeLongest, left + 1);
        }
        if(root.right != null && root.val == root.right.val - 1) {
            subTreeLongest = Math.max(subTreeLongest, right + 1);
        }
        if(subTreeLongest > longest) longest = subTreeLongest;
        return subTreeLongest;
    }
}