class Solution {
public:
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    void BT(vector<vector<int>> &res, vector<int> &tmp, vector<int> &nums, vector<bool> &used)
    {
        if(tmp.size() == nums.size()) res.emplace_back(tmp);
        else{
            for(int i = 0; i < nums.size(); i++)
            {
                if(used[i]) continue;
                if(i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;
                used[i] = true;
                tmp.emplace_back(nums[i]);
                BT(res, tmp, nums, used);
                tmp.pop_back();
                used[i] = false;
            }
        }
    }
    
    vector<vector<int> > permuteUnique(vector<int> &nums) {
        // write your code here
        vector<vector<int>> res;
        vector<int> tmp;
        vector<bool> used(nums.size(), false);
        sort(nums.begin(), nums.end());
        BT(res, tmp, nums, used);
        return res;
    }
};