/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root The root of the binary tree.
     * @param A and B two nodes
     * @return: Return the LCA of the two nodes.
     */
    
    private boolean isContain(TreeNode root, TreeNode node) {
        if(root == null) return false;
        if(root == node) return true;
        return isContain(root.left, node) || isContain(root.right, node);
    }
    
    private TreeNode helper(TreeNode root, TreeNode A, TreeNode B) {
        if(root == null || A == null || B == null) return null;
        if(root == A || root == B) return root;
        TreeNode left = helper(root.left, A, B);
        TreeNode right = helper(root.right, A, B);
        if(left != null && right != null) return root;
        return left != null? left : right;
    }
    
    public TreeNode lowestCommonAncestor3(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
        if(isContain(root, A) == false || isContain(root, B) == false) return null;
        return helper(root, A, B);
    }
}