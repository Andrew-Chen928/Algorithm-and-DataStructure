/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
     
    //very important, this is how to customize compare function in priority_queue!
    struct compare{
        bool operator()(ListNode *A, ListNode *B)
        {
            return A->val > B->val;
        }
    };
    
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // write your code here
        ListNode *dummy = new ListNode(0);
        ListNode *cur = dummy;
        //Must get familiar with priority_queue with 3 peremeters  
        priority_queue<ListNode*, vector<ListNode*>, compare> p;
        for(int i = 0; i < lists.size(); i++)
        {
            if(lists[i]) p.push(lists[i]);
        }
        
        while(!p.empty())
        {
            cur->next = p.top();
            cur = cur->next;
            p.pop();
            if(cur->next) p.push(cur->next);
        }
        return dummy->next;
    }
};


