/**
 * Definition of ListNode
 * class ListNode {
 * public:
 *     int val;
 *     ListNode *next;
 *     ListNode(int val) {
 *         this->val = val;
 *         this->next = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param head: The first node of linked list.
     * @return: You should return the head of the sorted linked list,
                    using constant space complexity.
     */
     
    ListNode* merge_two(ListNode *A, ListNode *B)
    {
        ListNode *dummy = new ListNode(0);
        ListNode *cur = dummy;
        while(A != nullptr && B != nullptr)
        {
            if(A->val < B->val)
            {
                cur->next = A;
                A = A->next;
            }
            else
            {
                cur->next = B;
                B = B->next;
            }
            cur = cur->next;
        }
        if(A != nullptr) cur->next = A;
        else cur->next = B;
        return dummy->next;
    }
    
    ListNode *merge_sort(ListNode *head, int size)
    {
        if(size == 1) 
        {
            head->next = nullptr;
            return head;
        }
        ListNode *left = head, *right = head;
        for(int i = 0; i < size / 2; i++)
        {
            right = right->next;
        }
        left = merge_sort(left, size / 2);
        right = merge_sort(right, size - size / 2);
        return merge_two(left, right);
    }
     
    int getSize(ListNode *head)
    {
        int s = 0;
        while(head != nullptr)
        {
            s++;
            head = head->next;
        }
        return s;
    }
    
    ListNode *sortList(ListNode *head) {
        // write your code here
        if(head == nullptr) return head;
        int size = getSize(head);
        return merge_sort(head, size);
    }
};


