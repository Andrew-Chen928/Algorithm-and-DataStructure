/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * This method will be invoked first, you should design your own algorithm 
     * to serialize a binary tree which denote by a root node to a string which
     * can be easily deserialized by your own "deserialize" method later.
     */
   
    string serialize(TreeNode *root) {
        // write your code here
        if(!root) return "";
        queue<TreeNode*> Q;
        string res = "";
        Q.push(root);
        while(!Q.empty())
        {   
            TreeNode *tmp = Q.front();
            Q.pop();
            if(!tmp) res = res + "#,";
            else{
                res = res + to_string(tmp->val);
                res = res + ",";
            }
            if(tmp)
            {
                Q.push(tmp->left);
                Q.push(tmp->right);
            }
        }
        int end = res.length() -1;
        for(int i = res.length() -1; i >= 0; i--)
        {
            if(res[i] != '#' && res[i] != ',')  
            {
                end = i;
                break;
            }
        }
        res = res.substr(0, end + 1);
        return res;
    }

    /**
     * This method will be invoked second, the argument data is what exactly
     * you serialized at method "serialize", that means the data is not given by
     * system, it's given by your own serialize method. So the format of data is
     * designed by yourself, and deserialize it here as you serialize it in 
     * "serialize" method.
     */
    int findComma(string data, int start)
    {
        int i = start;
        for(; i < data.length(); i++)
        {
            if(data[i] == ',') return i;
        }
        return i;
    }
    
    TreeNode *deserialize(string data) {
        // write your code here
        if(data.length() == 0) return nullptr;
        int start_index = 0, comma_index = 0;
        comma_index = findComma(data, start_index);
        string num = data.substr(start_index, comma_index - start_index);
        start_index = comma_index + 1;
        int value = stoi(num);
        TreeNode *root = new TreeNode(value);
        queue<TreeNode*> Q;
        Q.push(root);
        while(!Q.empty() && start_index < data.length())
        {
            int n = Q.size();
            for(int i = 0; i < n; i++)
            {
                TreeNode *tmp = Q.front();
                Q.pop();
                comma_index = findComma(data, start_index);
                num = data.substr(start_index, comma_index - start_index);
                start_index = comma_index + 1;
                if(num[0] != '#') {
                    value = stoi(num);
                    TreeNode *left_child = new TreeNode(value);
                    tmp->left = left_child;
                    Q.push(left_child);
                }
                if(start_index >= data.length()) break;
                comma_index = findComma(data, start_index);
                num = data.substr(start_index, comma_index - start_index);
                start_index = comma_index + 1;
                if(num[0] != '#') {
                    value = stoi(num);
                    TreeNode *right_child = new TreeNode(value);
                    tmp->right = right_child;
                    Q.push(right_child);
                }
                if(start_index >= data.length()) break;
            }
        }
        return root;
    }
};
