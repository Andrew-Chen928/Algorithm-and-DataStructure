class Solution {
public:
    vector<vector<string> > ans;
    vector<vector<string> > findLadders(string start, string end, unordered_set<string> &dict) {
        dict.insert(end);
        unordered_map<string, int> vis;
        vis[start] = 0;
        unordered_map<string, vector<string>> next;
        queue<string> q;
        q.push(start);
        int n = dict.size(), len = end.length();
        while(!q.empty())
        {
            string word = q.front();
            q.pop();
            if(word == end) break;
            vector<string> nextWord;
            for(int i = 0; i < len; i++)
            {
                string newWord = word;
                for(int c = 'a'; c < 'z'; c++)
                {
                    newWord[i] = c;
                    if(word[i] == c || !dict.count(newWord)) continue;
                    if(!vis.count(newWord))
                    {
                        q.push(newWord);
                        vis[newWord] = vis[word] + 1;
                    }
                    nextWord.emplace_back(newWord);
                }
            }
            next[word] = nextWord;
        }
        vector<string> path;
        path.emplace_back(start);
        dfs(path, vis, next, start, end);
        return ans;
    }
    
    void dfs(vector<string> &path, unordered_map<string, int> &vis, unordered_map<string, vector<string>> &next, string now, string end)
    {
        if(now == end)
        {
            ans.emplace_back(path);
        }
        else{
            auto v = next[now];
            for(int i = 0; i < v.size(); i++)
            {
                if(vis[v[i]] != vis[now] + 1) continue;
                path.emplace_back(v[i]);
                dfs(path, vis, next, v[i], end);
                path.pop_back();
            }
        }
    }
};