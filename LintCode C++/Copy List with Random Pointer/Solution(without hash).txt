/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    RandomListNode *copyRandomList(RandomListNode *head) {
        // write your code here
        RandomListNode *cur = head;
        while(cur != nullptr)
        {
            RandomListNode *copy = new RandomListNode(0);
            copy->next = cur->next;
            cur->next = copy;
            copy->label = cur->label;
            cur = copy->next;
        }
        
       cur = head;
       while(cur != nullptr)
       {
           if(cur->random != nullptr)
           {
               cur->next->random = cur->random->next;
           }
           else
           {
               cur->next->random = nullptr;
           }
           cur = cur->next->next;
       }
       
       cur = head;
       RandomListNode *curNew = cur->next, *headNew = cur->next; 
       while(cur!= nullptr)
       {
           cur->next = cur->next->next;
           if(curNew->next != nullptr)
           {
                curNew->next = curNew->next->next;
                curNew = curNew->next;
           }
           cur = cur->next;
       }
       return headNew;
    }
};