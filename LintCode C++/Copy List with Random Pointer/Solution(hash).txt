/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    RandomListNode *copyRandomList(RandomListNode *head) {
        // write your code here
        unordered_map<RandomListNode* , RandomListNode*> copy;
        RandomListNode *cur = head;
        RandomListNode *dummy = new RandomListNode(0);
        RandomListNode *curNew = dummy;
        
        while(cur != nullptr)
        {
            RandomListNode *tmp = new RandomListNode(cur->label);
            curNew->next = tmp;
            curNew = tmp;
            copy[cur] = tmp;
            cur = cur->next;
        }
        
        cur = head;
        while(cur != nullptr)
        {
            copy[cur]->random = copy[cur->random];
            cur = cur->next;
        }
        return dummy->next;
    }
};