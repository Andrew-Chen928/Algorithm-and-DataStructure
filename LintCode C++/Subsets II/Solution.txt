class Solution {
public:
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    vector<vector<int>> subsetsWithDup(vector<int> &S) {
        // write your code here
        vector<vector<int>> res;
        vector<int> sub;
        sort(S.begin(), S.end());
        backtrack(res, sub, 0, S);
        return res;
    }
    
    void backtrack(vector<vector<int>> &res, vector<int> &sub, int start, vector<int> &S)
    {
        res.emplace_back(sub);
        for(int i = start; i < S.size(); i++)
        {
            if(i != start && S[i] == S[i-1]) continue;
            sub.emplace_back(S[i]);
            backtrack(res, sub, i + 1, S);
            sub.pop_back();
        }
    }
};