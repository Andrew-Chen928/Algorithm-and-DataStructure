class Solution {
public:
    /**
     * @param obstacleGrid: A list of lists of integers
     * @return: An integer
     */ 
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // write your code here
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
       
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(obstacleGrid[i][j] == 0) obstacleGrid[i][j] = 1;
                else if(obstacleGrid[i][j] == 1) obstacleGrid[i][j] = 0;
            }
        }
        
        for(int i = 0; i < m; i++) 
        {
            if(obstacleGrid[i][0] == 0) 
            {
                for(int j = i+1; j < m; j++)
                {
                    obstacleGrid[j][0] = 0;
                }
               break;
            }
        }
        
        for(int i = 0; i < n; i++) 
        {
            if(obstacleGrid[0][i] == 0) 
            {
                for(int j = i+1; j < n; j++)
                {
                    obstacleGrid[0][j] = 0;
                }
                break;
            }
        }
        
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++)
            {
                if(obstacleGrid[i][j] != 0) 
                {
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1];
                }
            }
        }
        return obstacleGrid[m-1][n-1];
    }
};