/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
 
bool findTarget(TreeNode *root, TreeNode *target)
{
    if(root == nullptr) return false;
    if(root == target) return true;
    bool left = false, right = false;
    left = findTarget(root->left, target);
    right = findTarget(root->right, target);
    return (left || right);
}
 
class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param A and B: two nodes in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    TreeNode *lowestCommonAncestor(TreeNode *root, TreeNode *A, TreeNode *B) {
        // write your code here
        if(root == nullptr || A == nullptr || B == nullptr) return root;
        if(root == A || root == B) return root;
        bool l1 = findTarget(root->left, A);
        bool l2 = findTarget(root->left, B);
        if(l1 && l2) return lowestCommonAncestor(root->left, A, B);
        if(!l1 && !l2) return lowestCommonAncestor(root->right, A, B);
        return root;
    }
};





